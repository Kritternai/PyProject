#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
Clean Thai names from database and reset to English-friendly format
"""

import sys
import os
import sqlite3
import re
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def is_thai_text(text):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    if not text:
        return False
    # Thai Unicode range: \u0E00-\u0E7F
    return bool(re.search(r'[\u0E00-\u0E7F]', text))

def clean_thai_names_from_database():
    """‡∏•‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    print("üßπ Cleaning Thai Names from Database")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_path = os.path.join(os.path.dirname(__file__), 'database', 'instance', 'site.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Database file not found: {db_path}")
        return False
    
    print(f"‚úÖ Database file found: {db_path}")
    
    try:
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
        backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Database backed up to: {backup_path}")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cursor.execute("""
            SELECT id, username, first_name, last_name, email 
            FROM user 
        """)
        
        users = cursor.fetchall()
        updated_count = 0
        
        print(f"\nüìã Found {len(users)} users to check")
        print("-" * 40)
        
        for user in users:
            user_id, username, first_name, last_name, email = user
            needs_update = False
            new_values = {}
            
            print(f"\nüë§ User ID: {user_id}")
            print(f"   Email: {email}")
            print(f"   Current - Username: '{username}', First: '{first_name}', Last: '{last_name}'")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î first_name
            if first_name and is_thai_text(first_name):
                print(f"   üßπ Thai first_name detected: '{first_name}' ‚Üí clearing")
                new_values['first_name'] = ""
                needs_update = True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î last_name  
            if last_name and is_thai_text(last_name):
                print(f"   üßπ Thai last_name detected: '{last_name}' ‚Üí clearing")
                new_values['last_name'] = ""
                needs_update = True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á username ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            if username and is_thai_text(username):
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á username ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å email
                if email:
                    new_username = email.split("@")[0]
                    print(f"   üßπ Thai username detected: '{username}' ‚Üí '{new_username}'")
                    new_values['username'] = new_username
                    needs_update = True
                else:
                    print(f"   ‚ö†Ô∏è  Thai username found but no email: '{username}'")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if needs_update:
                update_fields = []
                update_values = []
                
                for field, value in new_values.items():
                    update_fields.append(f"{field} = ?")
                    update_values.append(value)
                
                if update_fields:
                    update_values.append(user_id)  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WHERE clause
                    
                    sql = f"UPDATE user SET {', '.join(update_fields)}, updated_at = ? WHERE id = ?"
                    update_values.insert(-1, datetime.utcnow().isoformat())  # ‡πÄ‡∏û‡∏¥‡πà‡∏° updated_at
                    
                    cursor.execute(sql, update_values)
                    updated_count += 1
                    print("   ‚úÖ Updated successfully")
            else:
                print("   ‚úÖ No Thai text found, no update needed")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        conn.commit()
        
        print(f"\n" + "=" * 50)
        print(f"‚úÖ Database cleanup completed!")
        print(f"üìä Total users checked: {len(users)}")
        print(f"üîÑ Users updated: {updated_count}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        print(f"\nüìã Updated User Data:")
        print("-" * 40)
        
        cursor.execute("""
            SELECT id, username, first_name, last_name, email, password_hash
            FROM user 
            WHERE password_hash = 'oauth_google'
            ORDER BY created_at DESC
            LIMIT 5
        """)
        
        google_users = cursor.fetchall()
        
        for user in google_users:
            user_id, username, first_name, last_name, email, password_hash = user
            print(f"üë§ {email}: username='{username}', name='{first_name} {last_name}'.strip()")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        return False

def update_google_oauth_settings():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google OAuth"""
    
    print(f"\n‚öôÔ∏è Google OAuth Configuration:")
    print("-" * 40)
    print("‚úÖ Modified routes_google_auth.py:")
    print("   - ‡πÉ‡∏ä‡πâ email prefix ‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å Google")
    print("   - ‡πÄ‡∏ã‡πá‡∏ï first_name ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
    print("   - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")
    
    print(f"\nüìù Profile Template Updates:")
    print("   - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©")
    print("   - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ")
    print("   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©")

if __name__ == "__main__":
    print("üóÇÔ∏è Database Thai Name Cleanup")
    print("Current time:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    success = clean_thai_names_from_database()
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth
    update_google_oauth_settings()
    
    if success:
        print(f"\nüéâ Cleanup completed successfully!")
        print(f"\nüìã Changes made:")
        print("‚úÖ Thai names cleared from database")
        print("‚úÖ Usernames converted to email prefixes")
        print("‚úÖ Google OAuth updated to not store Thai names")
        print("‚úÖ Profile form updated with English recommendations")
        
        print(f"\nüîÑ Next steps:")
        print("1. Users can edit their profiles at /profile/edit")
        print("2. Recommend using English names for better display")
        print("3. Username and bio can still use Thai if preferred")
    else:
        print(f"\n‚ö†Ô∏è  Cleanup failed. Please check the errors above.")