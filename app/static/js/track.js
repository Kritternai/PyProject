// app/static/js/track.js

(function() {
    console.log('üìä Track script loaded');
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ track ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    function isTrackPage() {
        return document.getElementById('total-pomodoros') !== null || 
               document.getElementById('progress-chart') !== null ||
               document.getElementById('time-chart') !== null;
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
    function waitForTrackPage() {
        if (isTrackPage()) {
            console.log('‚úÖ Track page detected, initializing...');
            initializeTrackPage();
        } else {
            // ‡∏£‡∏≠ 100ms ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            setTimeout(waitForTrackPage, 100);
        }
    }
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', waitForTrackPage);
    } else {
        waitForTrackPage();
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ track
    function initializeTrackPage() {
        console.log('üöÄ Initializing track page...');
        console.log('üìä Chart.js available:', typeof Chart !== 'undefined');
        console.log('üéØ Progress chart element:', document.getElementById('progress-chart'));
        console.log('üéØ Time chart element:', document.getElementById('time-chart'));
        console.log('üéØ Total pomodoros element:', document.getElementById('total-pomodoros'));

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    async function loadTrackDataAndRender() {
        console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• track...');
        try {
            const response = await fetch('/api/track/statistics');
            const data = await response.json();

            if (data.success) {
                console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                updateTodayProgress(data.today);
                updateTotalStatistics(data.total);
                // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
                renderWeeklyChart(data.weekly);
                renderTimeDistribution();
                // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á mock achievements
                renderMockAchievements();
            } else {
                console.error('‚ùå API Error:', data.error);
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                showMockData();
            }
        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error);
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            showMockData();
        }
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
     */
    function showMockData() {
        console.log('üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock...');
        
        // Mock data for today's progress
        const mockToday = {
            pomodoros: { current: 5, goal: 8 },
            study_time: { current: 125, goal: 240 },
            lessons: { current: 2, goal: 3 },
            notes: { current: 3, goal: 5 }
        };
        
        // Mock data for total statistics
        const mockTotal = {
            pomodoros: 45,
            study_time: 1125,
            lessons: 12,
            notes: 28
        };
        
        updateTodayProgress(mockToday);
        updateTotalStatistics(mockTotal);
        renderWeeklyChart([]);
        renderTimeDistribution();
        renderMockAchievements();
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô "Today's Progress"
     */
    function updateTodayProgress(todayData) {
        console.log('üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Today\'s Progress...');
        updateProgressBar('pomodoros', todayData.pomodoros.current, todayData.pomodoros.goal);
        updateProgressBar('study-time', todayData.study_time.current, todayData.study_time.goal);
        updateProgressBar('lessons', todayData.lessons.current, todayData.lessons.goal);
        updateProgressBar('notes', todayData.notes.current, todayData.notes.goal);
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Progress Bar) ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
     */
    function updateProgressBar(id, current, goal) {
        const valueElement = document.getElementById(`${id}-goal`);
        const barElement = document.getElementById(`${id}-progress`);
        if (valueElement && barElement) {
            const percentage = goal > 0 ? (current / goal) * 100 : 0;
            valueElement.textContent = `${current}/${goal}`;
            if (id === 'study-time') {
                valueElement.textContent += ' min';
            }
            barElement.style.width = `${percentage}%`;
            barElement.setAttribute('aria-valuenow', percentage);
        }
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô "Statistics Summary"
     */
    function updateTotalStatistics(totalData) {
        console.log('üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Statistics Summary...');
        document.getElementById('total-pomodoros').textContent = totalData.pomodoros;
        const hours = Math.floor(totalData.study_time / 60);
        document.getElementById('total-study-time').textContent = `${hours}h`;
        document.getElementById('total-lessons').textContent = totalData.lessons;
        document.getElementById('total-notes').textContent = totalData.notes;
    }

    /**
     * ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
     */
    function renderWeeklyChart(weeklyData) {
        console.log('üìà Rendering weekly chart...');
        const ctx = document.getElementById('progress-chart');
        console.log('üéØ Progress chart context:', ctx);
        
        if (!ctx) {
            console.warn('‚ùå Canvas element progress-chart not found');
            return;
        }

        if (window.weeklyChart) {
            window.weeklyChart.destroy();
        }

        // Mock data for demonstration (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
        const mockPomodoroData = [5, 7, 6, 8, 5, 3, 6];
        const mockStudyTimeData = [125, 175, 150, 200, 125, 75, 150];

        window.weeklyChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™', '‡∏≠‡∏≤'],
                datasets: [
                    {
                        label: 'Pomodoros',
                        data: mockPomodoroData,
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: 'Study Time (min)',
                        data: mockStudyTimeData,
                        borderColor: 'rgb(14, 184, 166)',
                        backgroundColor: 'rgba(14, 184, 166, 0.1)',
                        tension: 0.4,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { 
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    title: { 
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        });
        console.log('üìà ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à');
    }

    /**
     * ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
     */
    function renderTimeDistribution() {
        console.log('üìä Rendering time distribution chart...');
        const ctx = document.getElementById('time-chart');
        console.log('üéØ Time chart context:', ctx);
        
        if (!ctx) {
            console.warn('‚ùå Canvas element time-chart not found');
            return;
        }

        if (window.timeChart) {
            window.timeChart.destroy();
        }

        // Mock data for demonstration
        const timeData = [180, 45, 75]; // Study, Break, Note Taking (minutes)
        const labels = ['Study Time', 'Break Time', 'Note Taking'];
        const colors = [
            'rgba(59, 130, 246, 0.8)',   // Blue for Study
            'rgba(245, 158, 11, 0.8)',   // Orange for Break  
            'rgba(168, 85, 247, 0.8)'    // Purple for Note Taking
        ];

        window.timeChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: timeData,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color.replace('0.8', '1')),
                    borderWidth: 2,
                    hoverOffset: 10
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { 
                    legend: { 
                        position: 'bottom',
                        labels: {
                            usePointStyle: true,
                            padding: 20,
                            font: {
                                size: 12
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.parsed / total) * 100).toFixed(1);
                                return `${context.label}: ${context.parsed} min (${percentage}%)`;
                            }
                        }
                    }
                },
                cutout: '60%'
            }
        });
        console.log('üìä ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à');
    }

    /**
     * ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Mock-up Achievements
     */
    function renderMockAchievements() {
        const container = document.getElementById('achievements-list');
        if (!container) return;

        const achievements = [
            { icon: 'üèÜ', title: 'Focus Master', desc: 'Completed 8 Pomodoros in one day' },
            { icon: 'üìò', title: 'Knowledge Seeker', desc: 'Finished 10 lessons' },
            { icon: 'üìù', title: 'Note Expert', desc: 'Created 20 notes' }
        ];

        container.innerHTML = achievements.map(a => `
            <div class="achievement-item mb-3 d-flex align-items-center">
                <div class="achievement-icon me-3">${a.icon}</div>
                <div>
                    <div class="fw-bold">${a.title}</div>
                    <div class="text-secondary small">${a.desc}</div>
                </div>
            </div>
        `).join('');
    }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Chart.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        if (typeof Chart !== 'undefined') {
            console.log('‚úÖ Chart.js is loaded, initializing track data...');
            loadTrackDataAndRender();
        } else {
            console.warn('‚ö†Ô∏è Chart.js not loaded, retrying in 100ms...');
            setTimeout(() => {
                if (typeof Chart !== 'undefined') {
                    loadTrackDataAndRender();
                } else {
                    console.error('‚ùå Chart.js failed to load');
                    showMockData();
                }
            }, 100);
        }

        // Export functions for global access
        window.TrackPage = {
            loadTrackDataAndRender,
            showMockData,
            renderWeeklyChart,
            renderTimeDistribution
        };
    }

})();
