#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
Test script for email data storage in database
"""

import sys
import os
import sqlite3
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_database_email_storage():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    print("üîç Testing Email Storage in Database")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_path = os.path.join(os.path.dirname(__file__), 'instance', 'site.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Database file not found: {db_path}")
        return False
    
    print(f"‚úÖ Database file found: {db_path}")
    print(f"üìä Database size: {os.path.getsize(db_path)} bytes")
    print()
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á user
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user';")
        table_exists = cursor.fetchone()
        
        if not table_exists:
            print("‚ùå User table not found in database")
            return False
        
        print("‚úÖ User table exists")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        cursor.execute("PRAGMA table_info(user);")
        columns = cursor.fetchall()
        
        print("\nüìã User Table Structure:")
        print("-" * 40)
        for col in columns:
            col_name = col[1]
            col_type = col[2]
            is_pk = "üîë" if col[5] else "  "
            print(f"{is_pk} {col_name:<20} {col_type}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        cursor.execute("SELECT COUNT(*) FROM user;")
        user_count = cursor.fetchone()[0]
        
        print(f"\nüë• Total users in database: {user_count}")
        
        if user_count > 0:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
            cursor.execute("""
                SELECT id, username, email, first_name, profile_image, 
                       email_verified, created_at, password_hash
                FROM user 
                ORDER BY created_at DESC 
                LIMIT 5
            """)
            
            users = cursor.fetchall()
            
            print("\nüìß Recent Users with Email Data:")
            print("-" * 80)
            
            for i, user in enumerate(users, 1):
                user_id, username, email, first_name, profile_image, email_verified, created_at, password_hash = user
                
                print(f"\nüë§ User #{i}:")
                print(f"   ID: {user_id}")
                print(f"   Username: {username}")
                print(f"   üìß Email: {email}")
                print(f"   Name: {first_name or 'N/A'}")
                print(f"   Profile Image: {'Yes' if profile_image else 'No'}")
                print(f"   Email Verified: {'‚úÖ' if email_verified else '‚ùå'}")
                print(f"   Auth Type: {'üîë Google OAuth' if password_hash == 'oauth_google' else 'üîê Regular'}")
                print(f"   Created: {created_at}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Google OAuth ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        cursor.execute("""
            SELECT COUNT(*) FROM user 
            WHERE password_hash = 'oauth_google'
        """)
        google_users = cursor.fetchone()[0]
        
        print(f"\nüîë Google OAuth Users: {google_users}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        cursor.execute("SELECT COUNT(DISTINCT email) FROM user;")
        unique_emails = cursor.fetchone()[0]
        
        print(f"üìß Unique Email Addresses: {unique_emails}")
        
        conn.close()
        
        print("\n" + "=" * 50)
        print("‚úÖ Database email storage test completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        return False

def simulate_google_oauth_data():
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google OAuth"""
    
    print("\nüîÑ Simulating Google OAuth Data Flow")
    print("=" * 50)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Google userinfo API
    sample_google_data = {
        "email": "user.example@gmail.com",
        "name": "John Doe",
        "picture": "https://lh3.googleusercontent.com/a/example-profile-pic",
        "verified_email": True,
        "given_name": "John",
        "family_name": "Doe"
    }
    
    print("üì§ Data received from Google:")
    for key, value in sample_google_data.items():
        print(f"   {key}: {value}")
    
    print("\nüîÑ Processing for database storage:")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    processed_data = {
        "email": sample_google_data.get("email", ""),
        "username": sample_google_data.get("name", "").replace(" ", "_").lower() or sample_google_data.get("email", "").split("@")[0],
        "first_name": sample_google_data.get("given_name", ""),
        "profile_image": sample_google_data.get("picture", ""),
        "email_verified": True,
        "password_hash": "oauth_google"
    }
    
    print("üíæ Data prepared for UserModel:")
    for key, value in processed_data.items():
        print(f"   {key}: {value}")
    
    return processed_data

if __name__ == "__main__":
    print("üß™ Email Database Storage Test")
    print("Current time:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    success = test_database_email_storage()
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google OAuth
    simulate_google_oauth_data()
    
    if success:
        print("\nüéâ All tests passed! Email storage is working correctly.")
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Please check the database setup.")