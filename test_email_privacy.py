#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Google OAuth ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á
Test script for Google OAuth system that doesn't store real email addresses
"""

import sys
import os
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_email_prefix_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ email prefix ‡πÅ‡∏ó‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á"""
    
    print("üß™ Testing Email Prefix System")
    print("=" * 50)
    
    # Test cases
    test_emails = [
        "kanruethai.741236@gmail.com",
        "john.doe@example.com", 
        "student123@university.edu",
        "test.user@company.co.th",
        "‡∏Å‡∏±‡∏ô‡∏ï‡πå‡∏§‡∏ó‡∏±‡∏¢@gmail.com"  # ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô email
    ]
    
    print("üìß Email Prefix Conversion Tests:")
    print("-" * 40)
    
    for email in test_emails:
        email_prefix = email.split("@")[0]
        system_email = f"{email_prefix}@internal.system"
        
        print(f"Real Email: {email}")
        print(f"  ‚Üí Username: {email_prefix}")
        print(f"  ‚Üí System Email: {system_email}")
        print(f"  ‚Üí First Name: {email_prefix}")
        print()
    
    print("‚úÖ Email prefix conversion working correctly!")
    return True

def test_google_oauth_changes():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô Google OAuth"""
    
    print("\nüîê Testing Google OAuth Changes:")
    print("-" * 40)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock Google userinfo response
    mock_google_response = {
        "email": "kanruethai.741236@gmail.com",
        "name": "‡∏Å‡∏±‡∏ô‡∏ï‡πå‡∏§‡∏ó‡∏±‡∏¢ ‡πÅ‡∏Å‡πâ‡∏ß‡∏™‡∏ß‡πà‡∏≤‡∏á",
        "picture": "https://lh3.googleusercontent.com/a/example"
    }
    
    print("üì§ Mock Google Response:")
    for key, value in mock_google_response.items():
        print(f"   {key}: {value}")
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    email = mock_google_response["email"]
    email_prefix = email.split("@")[0]
    system_email = f"{email_prefix}@internal.system"
    
    print(f"\nüîÑ Processing:")
    print(f"   Original Email: {email}")
    print(f"   Email Prefix: {email_prefix}")
    print(f"   System Email: {system_email}")
    print(f"   Username: {email_prefix}")
    print(f"   First Name: {email_prefix} (‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á)")
    print(f"   Real Name Ignored: {mock_google_response['name']} ‚ùå")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    user_data = {
        "username": email_prefix,
        "email": system_email,
        "first_name": email_prefix,
        "last_name": "",
        "password_hash": "oauth_google",
        "profile_image": mock_google_response["picture"]
    }
    
    print(f"\nüíæ Data to be stored in database:")
    for key, value in user_data.items():
        print(f"   {key}: {value}")
    
    print("\n‚úÖ Google OAuth changes working correctly!")
    return True

def test_profile_form_updates():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
    
    print("\nüìù Testing Profile Form Updates:")
    print("-" * 40)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template
    template_path = os.path.join(os.path.dirname(__file__), 'app', 'templates', 'profile_fragment.html')
    
    if os.path.exists(template_path):
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        changes = [
            ('‡∏≠‡∏µ‡πÄ‡∏°‡∏• <small class="text-muted">(‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)</small>', 'Internal system email label'),
            ('username@internal.system', 'System email placeholder'),
            ('‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á', 'No real email notice'),
            ('readonly', 'Google OAuth email readonly'),
            ('‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', 'English name recommendation')
        ]
        
        print("üîç Template Changes:")
        for change, description in changes:
            if change in content:
                print(f"   ‚úÖ {description}")
            else:
                print(f"   ‚ùå {description}")
        
        print("‚úÖ Profile form updates verified!")
        return True
    else:
        print("‚ùå Profile template not found")
        return False

def simulate_user_experience():
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    
    print("\nüë§ Simulating User Experience:")
    print("-" * 40)
    
    print("üîë Login Flow:")
    print("1. User clicks 'Login with Google'")
    print("2. Google redirects back with userinfo")
    print("3. System extracts email prefix: 'kanruethai.741236'")
    print("4. Creates user with:")
    print("   - Username: kanruethai.741236")
    print("   - Email: kanruethai.741236@internal.system")
    print("   - First Name: kanruethai.741236")
    print("   - Real Google email: NOT STORED ‚ùå")
    print("   - Real Google name: NOT STORED ‚ùå")
    
    print(f"\nüìù Profile Editing:")
    print("1. User goes to /profile/edit")
    print("2. Sees email field as readonly (Google users)")
    print("3. Can edit first_name and last_name to preferred names")
    print("4. Recommended to use English names")
    print("5. Username and bio can be Thai or English")
    
    print(f"\nüîí Privacy Benefits:")
    print("‚úÖ Real email address not stored")
    print("‚úÖ Real name not stored automatically")
    print("‚úÖ User controls their display information")
    print("‚úÖ System still functions with internal emails")

if __name__ == "__main__":
    print("üîß Google OAuth Email Privacy Test")
    print("Current time:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # Run all tests
    email_test = test_email_prefix_system()
    oauth_test = test_google_oauth_changes()
    form_test = test_profile_form_updates()
    
    # Simulate user experience
    simulate_user_experience()
    
    print("\n" + "=" * 50)
    if email_test and oauth_test and form_test:
        print("üéâ All tests passed!")
        print("\nüìã System Changes Summary:")
        print("‚úÖ Google OAuth now uses email prefix instead of real email")
        print("‚úÖ System emails are internal (username@internal.system)")
        print("‚úÖ Real names from Google are not stored")
        print("‚úÖ Users can set their own display names")
        print("‚úÖ Email field is readonly for Google users")
        print("‚úÖ Privacy enhanced - no real email storage")
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the issues above.")
    
    print(f"\nüåê Test the system at: http://localhost:5003/auth/google")