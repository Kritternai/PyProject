#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
Debug script for user registration and database storage
"""

import sys
import os
import sqlite3
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def debug_database_connection():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    print("üîç Debug Database Connection")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    db_paths = [
        os.path.join(os.path.dirname(__file__), 'instance', 'site.db'),
        os.path.join(os.path.dirname(__file__), 'database', 'instance', 'site.db'),
        os.path.join(os.path.dirname(__file__), 'app', 'instance', 'site.db')
    ]
    
    print("üìç Checking database locations:")
    for i, path in enumerate(db_paths, 1):
        if os.path.exists(path):
            size = os.path.getsize(path)
            print(f"   {i}. ‚úÖ FOUND: {path} ({size} bytes)")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            try:
                conn = sqlite3.connect(path)
                cursor = conn.cursor()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á user
                cursor.execute("SELECT COUNT(*) FROM user")
                user_count = cursor.fetchone()[0]
                print(f"      üë• Users: {user_count}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                cursor.execute("SELECT created_at FROM user ORDER BY created_at DESC LIMIT 1")
                latest = cursor.fetchone()
                if latest:
                    print(f"      üìÖ Latest user: {latest[0]}")
                else:
                    print(f"      üìÖ No users found")
                
                conn.close()
                
            except Exception as e:
                print(f"      ‚ùå Error: {e}")
        else:
            print(f"   {i}. ‚ùå NOT FOUND: {path}")
    
    return db_paths

def check_google_oauth_flow():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Google OAuth"""
    
    print(f"\nüîê Debug Google OAuth Flow")
    print("-" * 40)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå client_secrets.json
    client_secret_files = [
        'client_secrets.json',
        'client_secret_408122418839-0s7eoqav9dl2ounlekripelnmjhk31v7.apps.googleusercontent.com (1).json'
    ]
    
    print("üîë OAuth Configuration Files:")
    for file in client_secret_files:
        path = os.path.join(os.path.dirname(__file__), file)
        if os.path.exists(path):
            print(f"   ‚úÖ FOUND: {file}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
            try:
                import json
                with open(path, 'r') as f:
                    data = json.load(f)
                
                if 'web' in data:
                    client_id = data['web'].get('client_id', 'N/A')[:20] + '...'
                    print(f"      Client ID: {client_id}")
                    
                    redirect_uris = data['web'].get('redirect_uris', [])
                    print(f"      Redirect URIs: {len(redirect_uris)} configured")
                    for uri in redirect_uris:
                        print(f"        - {uri}")
                        
            except Exception as e:
                print(f"      ‚ùå Error reading: {e}")
        else:
            print(f"   ‚ùå NOT FOUND: {file}")

def test_manual_user_creation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"""
    
    print(f"\nüß™ Test Manual User Creation")
    print("-" * 40)
    
    # ‡∏´‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    db_path = None
    test_paths = [
        os.path.join(os.path.dirname(__file__), 'database', 'instance', 'site.db'),
        os.path.join(os.path.dirname(__file__), 'instance', 'site.db')
    ]
    
    for path in test_paths:
        if os.path.exists(path):
            db_path = path
            break
    
    if not db_path:
        print("‚ùå No database found for testing")
        return False
    
    print(f"‚úÖ Using database: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        import uuid
        test_user_id = str(uuid.uuid4())
        test_data = {
            'id': test_user_id,
            'username': 'testuser123',
            'email': 'testuser123@internal.system',
            'password_hash': 'oauth_google',
            'first_name': 'testuser123',
            'last_name': '',
            'email_verified': True,
            'created_at': datetime.utcnow().isoformat(),
            'updated_at': datetime.utcnow().isoformat()
        }
        
        print("üìù Creating test user...")
        cursor.execute("""
            INSERT INTO user (id, username, email, password_hash, first_name, last_name, 
                            email_verified, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            test_data['id'], test_data['username'], test_data['email'], 
            test_data['password_hash'], test_data['first_name'], test_data['last_name'],
            test_data['email_verified'], test_data['created_at'], test_data['updated_at']
        ))
        
        conn.commit()
        print("‚úÖ Test user created successfully")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        cursor.execute("SELECT COUNT(*) FROM user WHERE id = ?", (test_user_id,))
        count = cursor.fetchone()[0]
        
        if count == 1:
            print("‚úÖ User data verified in database")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            cursor.execute("SELECT username, email, first_name FROM user WHERE id = ?", (test_user_id,))
            user_data = cursor.fetchone()
            print(f"   Username: {user_data[0]}")
            print(f"   Email: {user_data[1]}")
            print(f"   First Name: {user_data[2]}")
            
            # ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            cursor.execute("DELETE FROM user WHERE id = ?", (test_user_id,))
            conn.commit()
            print("üóëÔ∏è Test user cleaned up")
            
        else:
            print("‚ùå User data not found after creation")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Database test failed: {e}")
        return False

def check_flask_logs():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏Ç‡∏≠‡∏á Flask"""
    
    print(f"\nüìã Check Flask Application Logs")
    print("-" * 40)
    
    print("üí° To debug Google OAuth registration:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:5003")
    print("2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Login with Google'")
    print("3. ‡∏î‡∏π terminal ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô Flask server")
    print("4. ‡∏°‡∏≠‡∏á‡∏´‡∏≤ log messages ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:")
    print("   - 'Creating new user from Google OAuth'")
    print("   - 'New user created with ID: ...'")
    print("   - Database connection errors")
    print("   - OAuth callback errors")
    
    print(f"\nüîç Common Issues:")
    print("‚ùì ‡πÑ‡∏°‡πà‡∏°‡∏µ log ‡πÅ‡∏™‡∏î‡∏á ‚Üí OAuth callback ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å")
    print("‚ùì 'Database connection error' ‚Üí ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("‚ùì 'User creation failed' ‚Üí ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    print("‚ùì 'OAuth token fetch failed' ‚Üí ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Google OAuth config")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    
    print("üîß Debug: User Registration Not Saving to Database")
    print("Current time:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_paths = debug_database_connection()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google OAuth
    check_google_oauth_flow()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    db_test = test_manual_user_creation()
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£ debug
    check_flask_logs()
    
    print(f"\n" + "=" * 50)
    print("üéØ DIAGNOSIS SUMMARY:")
    
    if db_test:
        print("‚úÖ Database connection and user creation: WORKING")
        print("üîç Issue likely in Google OAuth flow or Flask routing")
        print()
        print("üìã Next Steps:")
        print("1. ‡∏•‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô Google: http://localhost:5003/auth/google")
        print("2. ‡∏î‡∏π Flask server logs ‡πÉ‡∏ô terminal")
        print("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ callback URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô Google Console")
        print("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ client_secrets.json ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        print("‚ùå Database connection issue detected")
        print("üîß Fix database setup first, then try OAuth again")

if __name__ == "__main__":
    main()