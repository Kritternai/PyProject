#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö
Check email storage in database after privacy system update
"""

import sys
import os
import sqlite3
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_current_email_system():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    print("üîç Checking Current Email System in Database")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_paths = [
        os.path.join(os.path.dirname(__file__), 'database', 'instance', 'site.db'),
        os.path.join(os.path.dirname(__file__), 'instance', 'site.db')
    ]
    
    db_path = None
    for path in db_paths:
        if os.path.exists(path):
            db_path = path
            break
    
    if not db_path:
        print("‚ùå Database file not found")
        return False
    
    print(f"‚úÖ Database file found: {db_path}")
    print(f"üìä Database size: {os.path.getsize(db_path)} bytes")
    print()
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á user
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user';")
        table_exists = cursor.fetchone()
        
        if not table_exists:
            print("‚ùå User table not found in database")
            return False
        
        print("‚úÖ User table exists")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cursor.execute("SELECT COUNT(*) FROM user;")
        user_count = cursor.fetchone()[0]
        
        print(f"\nüë• Total users in database: {user_count}")
        
        if user_count > 0:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π◊ú‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            cursor.execute("""
                SELECT id, username, email, first_name, last_name, 
                       password_hash, email_verified, created_at 
                FROM user 
                ORDER BY created_at DESC
            """)
            
            users = cursor.fetchall()
            
            print(f"\nüìß Email Storage Analysis:")
            print("-" * 50)
            
            google_users = 0
            regular_users = 0
            internal_emails = 0
            real_emails = 0
            
            for i, user in enumerate(users, 1):
                user_id, username, email, first_name, last_name, password_hash, email_verified, created_at = user
                
                print(f"\nüë§ User #{i}:")
                print(f"   ID: {user_id}")
                print(f"   Username: {username}")
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                if "@internal.system" in email:
                    print(f"   üìß Email: {email} (üîí INTERNAL - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á)")
                    internal_emails += 1
                else:
                    print(f"   üìß Email: {email} (‚ö†Ô∏è REAL EMAIL)")
                    real_emails += 1
                
                print(f"   Name: {first_name or 'N/A'} {last_name or ''}")
                print(f"   Email Verified: {'‚úÖ' if email_verified else '‚ùå'}")
                
                if password_hash == 'oauth_google':
                    print(f"   Auth Type: üîë Google OAuth")
                    google_users += 1
                else:
                    print(f"   Auth Type: üîê Regular")
                    regular_users += 1
                
                print(f"   Created: {created_at}")
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            print(f"\n" + "=" * 50)
            print(f"üìä EMAIL PRIVACY ANALYSIS:")
            print(f"üë• Total Users: {user_count}")
            print(f"üîë Google OAuth Users: {google_users}")
            print(f"üîê Regular Users: {regular_users}")
            print(f"üîí Internal Emails: {internal_emails}")
            print(f"‚ö†Ô∏è  Real Emails: {real_emails}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            print(f"\nüõ°Ô∏è PRIVACY STATUS:")
            if real_emails == 0:
                print("‚úÖ EXCELLENT: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏¢!")
                print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
            else:
                print(f"‚ö†Ô∏è  WARNING: ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á {real_emails} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                print("‚ùó ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ")
            
            if google_users > 0:
                google_with_internal = cursor.execute("""
                    SELECT COUNT(*) FROM user 
                    WHERE password_hash = 'oauth_google' 
                    AND email LIKE '%@internal.system'
                """).fetchone()[0]
                
                print(f"\nüîë GOOGLE OAUTH ANALYSIS:")
                print(f"   Google users with internal emails: {google_with_internal}/{google_users}")
                if google_with_internal == google_users:
                    print("   ‚úÖ All Google users use internal emails!")
                else:
                    print("   ‚ö†Ô∏è  Some Google users still have real emails")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        return False

def explain_current_system():
    """‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
    
    print(f"\nüìã CURRENT EMAIL SYSTEM EXPLANATION:")
    print("=" * 60)
    
    print("üîÑ Google OAuth Email Processing:")
    print("1. ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å Google: kanruethai.741236@gmail.com")
    print("2. ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤ email prefix: kanruethai.741236")
    print("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á system email: kanruethai.741236@internal.system")
    print("4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô database:")
    print("   - username: kanruethai.741236")
    print("   - email: kanruethai.741236@internal.system")
    print("   - first_name: kanruethai.741236")
    print("   - ‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
    print("   - ‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
    
    print(f"\nüõ°Ô∏è Privacy Benefits:")
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Google")
    print("‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ó‡∏ô")
    print("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà")
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥")

def test_oauth_data_processing():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OAuth"""
    
    print(f"\nüß™ Testing OAuth Data Processing:")
    print("-" * 40)
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google
    mock_google_data = {
        "email": "kanruethai.741236@gmail.com", 
        "name": "‡∏Å‡∏±‡∏ô‡∏ï‡πå‡∏§‡∏ó‡∏±‡∏¢ ‡πÅ‡∏Å‡πâ‡∏ß‡∏™‡∏ß‡πà‡∏≤‡∏á",
        "picture": "https://lh3.googleusercontent.com/a/example"
    }
    
    print("üì• Data from Google:")
    for key, value in mock_google_data.items():
        print(f"   {key}: {value}")
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    email = mock_google_data["email"]
    email_prefix = email.split("@")[0]
    system_email = f"{email_prefix}@internal.system"
    
    print(f"\nüîÑ Processing:")
    print(f"   Original Email: {email}")
    print(f"   Email Prefix: {email_prefix}")
    print(f"   System Email: {system_email}")
    
    processed_data = {
        "username": email_prefix,
        "email": system_email,
        "first_name": email_prefix,
        "last_name": "",
        "password_hash": "oauth_google",
        "profile_image": mock_google_data["picture"],
        "email_verified": True
    }
    
    print(f"\nüíæ Data stored in database:")
    for key, value in processed_data.items():
        print(f"   {key}: {value}")
    
    print(f"\n‚ùå Data NOT stored:")
    print(f"   real_email: {email} (‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)")
    print(f"   real_name: {mock_google_data['name']} (‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á)")

if __name__ == "__main__":
    print("üîç Email Storage Analysis After Privacy Update")
    print("Current time:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    success = check_current_email_system()
    
    # ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
    explain_current_system()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    test_oauth_data_processing()
    
    print(f"\n" + "=" * 60)
    if success:
        print("üéâ Analysis completed!")
        print("\nüìã Key Points:")
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Google OAuth")
        print("‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (username@internal.system)")
        print("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á")
    else:
        print("‚ö†Ô∏è  Analysis failed. Please check database connection.")