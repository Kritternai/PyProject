name: 🎯 Smart Learning Hub - Unified CI/CD Pipeline

on:
  push:
    branches: [ main, dev/web ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: '3.11'
  FLASK_ENV: 'testing'

jobs:
  # ============================================
  # PIPELINE INITIATION
  # ============================================
  pipeline-init:
    name: 🚀 Pipeline Initiation
    runs-on: ubuntu-latest
    outputs:
      pipeline-id: ${{ steps.init.outputs.pipeline-id }}
      branch: ${{ steps.init.outputs.branch }}
      event: ${{ steps.init.outputs.event }}
    
    steps:
    - name: 🎯 Initialize Pipeline
      id: init
      run: |
        echo "🎯 Smart Learning Hub - Unified CI/CD Pipeline"
        echo "=============================================="
        echo "📅 Date: $(date)"
        echo "🔗 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo "🎭 Event: ${{ github.event_name }}"
        echo "🆔 Pipeline ID: ${{ github.run_id }}"
        echo "=============================================="
        
        echo "pipeline-id=${{ github.run_id }}" >> $GITHUB_OUTPUT
        echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "event=${{ github.event_name }}" >> $GITHUB_OUTPUT
        
    - name: 📊 Pipeline Overview
      run: |
        echo "📊 Unified CI/CD Pipeline Components:"
        echo "  🔍 Code Quality & Security Analysis"
        echo "  🧪 Testing & Coverage Analysis"
        echo "  🔨 Build Validation & Compatibility"
        echo "  🚀 Deployment & Health Monitoring"
        echo "  📈 Performance & Metrics Collection"
        echo "=============================================="

  # ============================================
  # CODE QUALITY & SECURITY
  # ============================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: pipeline-init
    outputs:
      quality-status: ${{ steps.quality-check.outputs.status }}
      security-status: ${{ steps.security-check.outputs.status }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          
    - name: 📥 Install Quality Tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit safety
        
    - name: 🎨 Code Formatting Analysis
      id: format-check
      run: |
        echo "🎨 Running code formatting analysis..."
        if black --check --diff app/ tests/; then
          echo "✅ Code formatting is perfect"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Code formatting issues detected"
          echo "💡 Run 'black app/ tests/' to fix"
          echo "status=warning" >> $GITHUB_OUTPUT
        fi
        
    - name: 📦 Import Organization Analysis
      id: import-check
      run: |
        echo "📦 Running import organization analysis..."
        if isort --check-only --diff app/ tests/; then
          echo "✅ Import organization is perfect"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Import organization issues detected"
          echo "💡 Run 'isort app/ tests/' to fix"
          echo "status=warning" >> $GITHUB_OUTPUT
        fi
        
    - name: 🔍 Code Linting Analysis
      id: lint-check
      run: |
        echo "🔍 Running comprehensive linting analysis..."
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics || {
          echo "❌ Critical linting issues found"
          exit 1
        }
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "✅ Linting analysis completed"
        
    - name: 🔒 Security Vulnerability Analysis
      id: security-check
      run: |
        echo "🔒 Running security vulnerability analysis..."
        bandit -r app/ -f txt -o bandit-report.txt || {
          echo "⚠️ Security vulnerabilities detected - check bandit-report.txt"
          echo "status=warning" >> $GITHUB_OUTPUT
        }
        safety check || {
          echo "⚠️ Dependency vulnerabilities detected"
          echo "status=warning" >> $GITHUB_OUTPUT
        }
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: ✅ Quality Status Summary
      id: quality-check
      run: |
        echo "✅ Code Quality & Security Analysis Complete"
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 📊 Upload Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ needs.pipeline-init.outputs.pipeline-id }}
        path: |
          bandit-report.txt
          safety-report.txt

  # ============================================
  # TESTING & COVERAGE
  # ============================================
  testing-coverage:
    name: 🧪 Testing & Coverage Analysis
    runs-on: ubuntu-latest
    needs: [pipeline-init, code-quality]
    outputs:
      test-status: ${{ steps.test-summary.outputs.status }}
      coverage-percentage: ${{ steps.coverage-analysis.outputs.coverage }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-testing-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-testing-
          
    - name: 📥 Install Testing Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        
    - name: 🗄️ Setup Test Environment
      run: |
        export FLASK_ENV=testing
        export DATABASE_URL=sqlite:///test.db
        export FLASK_SECRET_KEY=test_secret_key_for_ci
        
    - name: 🏗️ Initialize Test Database
      run: |
        echo "🏗️ Setting up test database..."
        python database/setup_database.py
        echo "✅ Test database ready"
        
    - name: 🧪 Execute Test Suite
      id: test-execution
      run: |
        echo "🧪 Running comprehensive test suite..."
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=60 \
          --junitxml=pytest-report.xml \
          --verbose || {
          echo "❌ Tests failed or coverage below threshold"
          exit 1
        }
        echo "✅ All tests passed with sufficient coverage"
        
    - name: 📊 Coverage Analysis
      id: coverage-analysis
      run: |
        echo "📊 Analyzing test coverage..."
        COVERAGE=$(grep -o 'TOTAL.*[0-9]*%' htmlcov/index.html | grep -o '[0-9]*%' | head -1)
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "📈 Coverage Achieved: $COVERAGE"
        
    - name: ✅ Test Status Summary
      id: test-summary
      run: |
        echo "✅ Testing & Coverage Analysis Complete"
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 📊 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ needs.pipeline-init.outputs.pipeline-id }}
        path: |
          coverage.xml
          htmlcov/
          pytest-report.xml

  # ============================================
  # BUILD VALIDATION
  # ============================================
  build-validation:
    name: 🔨 Build Validation & Compatibility
    runs-on: ubuntu-latest
    needs: [pipeline-init, code-quality, testing-coverage]
    if: github.event_name == 'pull_request'
    outputs:
      build-status: ${{ steps.build-summary.outputs.status }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔍 Validate Deployment Files
      run: |
        echo "🔍 Validating deployment configuration..."
        REQUIRED_FILES=("Procfile" "render.yaml" "requirements.txt" "start.py" "build.sh")
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required deployment file missing: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        echo "✅ All deployment files validated"
        
    - name: 🏗️ Test Application Build
      run: |
        echo "🏗️ Testing application build process..."
        export FLASK_ENV=production
        export DATABASE_URL=sqlite:///site.db
        export FLASK_SECRET_KEY=build_test_secret_key
        
        python database/setup_database.py
        echo "✅ Database setup completed"
        
    - name: 🚀 Test Application Startup
      run: |
        echo "🚀 Testing application startup process..."
        timeout 30s python start.py &
        APP_PID=$!
        
        sleep 10
        
        if curl -f -s http://localhost:8000/ > /dev/null; then
          echo "✅ Application startup test passed"
          kill $APP_PID 2>/dev/null || true
        else
          echo "❌ Application startup test failed"
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
    - name: ✅ Build Validation Summary
      id: build-summary
      run: |
        echo "✅ Build Validation & Compatibility Complete"
        echo "status=success" >> $GITHUB_OUTPUT

  # ============================================
  # DEPLOYMENT & HEALTH MONITORING
  # ============================================
  deployment:
    name: 🚀 Deployment & Health Monitoring
    runs-on: ubuntu-latest
    needs: [pipeline-init, code-quality, testing-coverage]
    if: github.ref == 'refs/heads/main'
    environment: production
    outputs:
      deployment-status: ${{ steps.deploy-summary.outputs.status }}
      health-status: ${{ steps.health-check.outputs.status }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: 🏥 Comprehensive Health Monitoring
      id: health-check
      run: |
        echo "🏥 Running comprehensive health monitoring..."
        
        DEPLOYMENT_URL="${{ secrets.RENDER_SERVICE_URL }}"
        
        if [ -z "$DEPLOYMENT_URL" ]; then
          echo "⚠️ RENDER_SERVICE_URL not set - skipping health check"
          echo "status=skipped" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "🌐 Monitoring deployment at: $DEPLOYMENT_URL"
        
        for i in {1..10}; do
          echo "⏳ Health check attempt $i/10..."
          
          if curl -f -s -o /dev/null "$DEPLOYMENT_URL"; then
            echo "✅ Primary health check passed"
            
            # Test specific endpoints
            echo "🔍 Testing specific endpoints..."
            
            if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
              echo "✅ Main page accessible"
            fi
            
            if curl -f -s "$DEPLOYMENT_URL/api/health" > /dev/null; then
              echo "✅ API health endpoint accessible"
            fi
            
            echo "🎉 Deployment healthy and fully operational!"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "⏳ Service not ready... waiting 30 seconds"
            sleep 30
          fi
        done
        
        echo "❌ Health check failed - service did not respond within timeout"
        echo "status=failed" >> $GITHUB_OUTPUT
        exit 1
        
    - name: ✅ Deployment Summary
      id: deploy-summary
      run: |
        echo "✅ Deployment & Health Monitoring Complete"
        echo "status=success" >> $GITHUB_OUTPUT

  # ============================================
  # PERFORMANCE & METRICS COLLECTION
  # ============================================
  performance-metrics:
    name: 📈 Performance & Metrics Collection
    runs-on: ubuntu-latest
    needs: [pipeline-init, code-quality, testing-coverage]
    if: always()
    outputs:
      performance-status: ${{ steps.perf-summary.outputs.status }}
    
    steps:
    - name: 📊 Collect Pipeline Metrics
      id: metrics-collection
      run: |
        echo "📊 Collecting comprehensive pipeline metrics..."
        
        # Calculate pipeline duration
        START_TIME="${{ needs.pipeline-init.outputs.pipeline-id }}"
        CURRENT_TIME=$(date +%s)
        
        echo "📈 Pipeline Metrics:"
        echo "  🆔 Pipeline ID: ${{ needs.pipeline-init.outputs.pipeline-id }}"
        echo "  🔗 Branch: ${{ needs.pipeline-init.outputs.branch }}"
        echo "  🎭 Event: ${{ needs.pipeline-init.outputs.event }}"
        echo "  📝 Commit: ${{ github.sha }}"
        echo "  👤 Author: ${{ github.actor }}"
        echo "  🧪 Test Coverage: ${{ needs.testing-coverage.outputs.coverage-percentage }}"
        echo "  🔍 Quality Status: ${{ needs.code-quality.outputs.quality-status }}"
        echo "  🔒 Security Status: ${{ needs.code-quality.outputs.security-status }}"
        echo "  🚀 Deployment Status: ${{ needs.deployment.outputs.deployment-status }}"
        echo "  🏥 Health Status: ${{ needs.deployment.outputs.health-status }}"
        
    - name: 📊 Generate Performance Report
      run: |
        echo "📊 Performance & Metrics Collection Complete"
        
    - name: ✅ Performance Summary
      id: perf-summary
      run: |
        echo "✅ Performance & Metrics Collection Complete"
        echo "status=success" >> $GITHUB_OUTPUT

  # ============================================
  # UNIFIED PIPELINE SUMMARY
  # ============================================
  pipeline-summary:
    name: 📊 Unified Pipeline Summary
    runs-on: ubuntu-latest
    needs: [pipeline-init, code-quality, testing-coverage, build-validation, deployment, performance-metrics]
    if: always()
    
    steps:
    - name: 🎯 Generate Unified Pipeline Summary
      run: |
        echo "🎯 Smart Learning Hub - Unified CI/CD Pipeline Summary"
        echo "====================================================="
        echo ""
        echo "📊 Pipeline Execution Results:"
        echo "  🆔 Pipeline ID: ${{ needs.pipeline-init.outputs.pipeline-id }}"
        echo "  🔗 Branch: ${{ needs.pipeline-init.outputs.branch }}"
        echo "  🎭 Event: ${{ needs.pipeline-init.outputs.event }}"
        echo ""
        echo "🔍 Code Quality & Security: ${{ needs.code-quality.result }}"
        echo "🧪 Testing & Coverage: ${{ needs.testing-coverage.result }}"
        echo "🔨 Build Validation: ${{ needs.build-validation.result }}"
        echo "🚀 Deployment: ${{ needs.deployment.result }}"
        echo "📈 Performance Metrics: ${{ needs.performance-metrics.result }}"
        echo ""
        echo "📈 Detailed Metrics:"
        echo "  🧪 Test Coverage: ${{ needs.testing-coverage.outputs.coverage-percentage }}"
        echo "  🔍 Quality Status: ${{ needs.code-quality.outputs.quality-status }}"
        echo "  🔒 Security Status: ${{ needs.code-quality.outputs.security-status }}"
        echo "  🚀 Deployment Status: ${{ needs.deployment.outputs.deployment-status }}"
        echo "  🏥 Health Status: ${{ needs.deployment.outputs.health-status }}"
        echo ""
        
        # Determine overall pipeline status
        if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.testing-coverage.result }}" = "success" ]; then
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ needs.build-validation.result }}" = "success" ]; then
              echo "✅ PR Ready for Review - All validation checks passed!"
              echo "🎉 Unified CI/CD Pipeline: SUCCESS"
            else
              echo "❌ PR Build Validation Failed"
              echo "🎯 Unified CI/CD Pipeline: FAILED"
              exit 1
            fi
          else
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              if [ "${{ needs.deployment.result }}" = "success" ]; then
                echo "🎉 Production Deployment Successful!"
                echo "🌐 Application URL: ${{ secrets.RENDER_SERVICE_URL }}"
                echo "🎯 Unified CI/CD Pipeline: SUCCESS"
              else
                echo "❌ Production Deployment Failed"
                echo "🎯 Unified CI/CD Pipeline: FAILED"
                exit 1
              fi
            else
              echo "✅ Development Branch - Quality checks passed!"
              echo "🎯 Unified CI/CD Pipeline: SUCCESS"
            fi
          fi
        else
          echo "❌ Pipeline Failed - Quality or Testing issues detected"
          echo "🎯 Unified CI/CD Pipeline: FAILED"
          exit 1
        fi
        
        echo ""
        echo "====================================================="
        echo "🎯 Unified CI/CD Pipeline completed at: $(date)"
        echo "====================================================="
