name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev/web, develop ]
  pull_request:
    branches: [ main, dev/web ]

env:
  PYTHON_VERSION: '3.11'
  FLASK_ENV: 'testing'

jobs:
  # ============================================
  # CODE QUALITY & LINTING
  # ============================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety
        pip install -r requirements.txt
        
    - name: Code formatting check (Black)
      run: |
        black --check --diff .
        
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .
        
    - name: Linting (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security check (Bandit)
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Dependency vulnerability check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ============================================
  # TESTING
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-flask
        pip install -r requirements.txt
        
    - name: Set up test environment
      run: |
        export FLASK_ENV=testing
        export DATABASE_URL=sqlite:///test.db
        export FLASK_SECRET_KEY=test_secret_key_for_ci
        
    - name: Create test database
      run: |
        python database/setup_database.py
        
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml
          htmlcov/

  # ============================================
  # BUILD & DEPLOY PREVIEW
  # ============================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build application
      run: |
        chmod +x build.sh
        ./build.sh
        
    - name: Test application startup
      run: |
        export FLASK_ENV=production
        export DATABASE_URL=sqlite:///site.db
        export FLASK_SECRET_KEY=build_test_secret_key
        timeout 30s python start.py &
        sleep 10
        curl -f http://localhost:8000/ || exit 1
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          app/
          database/
          *.py
          *.sh
          *.txt
          *.yaml

  # ============================================
  # SECURITY SCAN
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================
  # NOTIFICATIONS
  # ============================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, build]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' }}
      run: |
        echo "‚úÖ All CI/CD checks passed successfully!"
        echo "üöÄ Ready for deployment"
        
    - name: Notify Failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "‚ùå CI/CD checks failed"
        echo "üîç Please review the logs and fix issues"
        exit 1
