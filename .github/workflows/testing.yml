name: 🧪 Testing & Coverage

on:
  push:
    branches: [ main, dev/web ]
  pull_request:
    branches: [ main ]
  workflow_call:
    needs: code-quality
    outputs:
      coverage-percentage:
        description: "Test coverage percentage"
        value: ${{ jobs.test-coverage.outputs.coverage }}
      test-status:
        description: "Test execution status"
        value: ${{ jobs.test-coverage.outputs.status }}

jobs:
  test-coverage:
    name: 🧪 Test Execution & Coverage Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      coverage: ${{ steps.coverage-output.outputs.coverage }}
      status: ${{ steps.test-status.outputs.status }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-testing-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-testing-
          
    - name: 📥 Install testing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        
    - name: 🗄️ Set up test environment
      run: |
        export FLASK_ENV=testing
        export DATABASE_URL=sqlite:///test.db
        export FLASK_SECRET_KEY=test_secret_key_for_ci
        
    - name: 🏗️ Create test database
      run: |
        echo "🏗️ Creating test database..."
        python database/setup_database.py
        echo "✅ Test database created"
        
    - name: 🧪 Run tests with coverage
      run: |
        echo "🧪 Running comprehensive test suite..."
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=60 \
          --junitxml=pytest-report.xml \
          --verbose || {
          echo "❌ Tests failed or coverage below threshold"
          exit 1
        }
        echo "✅ All tests passed with sufficient coverage"
        
    - name: 📊 Extract coverage percentage
      id: coverage-output
      run: |
        COVERAGE=$(grep -o 'TOTAL.*[0-9]*%' htmlcov/index.html | grep -o '[0-9]*%' | head -1)
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "📊 Coverage: $COVERAGE"
        
    - name: ✅ Test Status
      id: test-status
      run: |
        echo "✅ Test execution completed successfully!"
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 📊 Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          coverage.xml
          htmlcov/
          pytest-report.xml
