name: 🎯 Smart Learning Hub - Main Orchestrator

on:
  push:
    branches: [ main, dev/web ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: '3.11'
  FLASK_ENV: 'testing'

jobs:
  # ============================================
  # ORCHESTRATOR JOB
  # ============================================
  orchestrate:
    name: 🎯 CI/CD Orchestrator
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Pipeline Initiation
      run: |
        echo "🎯 Smart Learning Hub CI/CD Pipeline"
        echo "====================================="
        echo "📅 Date: $(date)"
        echo "🔗 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo "🎭 Event: ${{ github.event_name }}"
        echo "====================================="
        
    - name: 📊 Pipeline Status
      run: |
        echo "📊 Pipeline Components:"
        echo "  🔍 Code Quality & Security"
        echo "  🧪 Testing & Coverage"
        echo "  🔨 Build Validation (PR only)"
        echo "  🚀 Deployment (main branch only)"
        echo "====================================="
        
  # ============================================
  # WORKFLOW CALLS
  # ============================================
  
  code-quality:
    name: 🔍 Code Quality & Security
    uses: ./.github/workflows/code-quality.yml
    secrets: inherit
    
  testing:
    name: 🧪 Testing & Coverage
    uses: ./.github/workflows/testing.yml
    needs: code-quality
    secrets: inherit
    
  build-validation:
    name: 🔨 Build Validation
    uses: ./.github/workflows/build-validation.yml
    needs: [code-quality, testing]
    if: github.event_name == 'pull_request'
    secrets: inherit
    
  deployment:
    name: 🚀 Deployment
    uses: ./.github/workflows/deployment.yml
    needs: [code-quality, testing]
    if: github.ref == 'refs/heads/main'
    secrets: inherit
    
  # ============================================
  # FINAL SUMMARY
  # ============================================
  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [orchestrate, code-quality, testing, build-validation, deployment]
    if: always()
    
    steps:
    - name: 📊 Generate Pipeline Summary
      run: |
        echo "📊 Smart Learning Hub CI/CD Pipeline Summary"
        echo "============================================="
        echo ""
        echo "🔍 Code Quality: ${{ needs.code-quality.result }}"
        echo "🧪 Testing: ${{ needs.testing.result }}"
        echo "🔨 Build Validation: ${{ needs.build-validation.result }}"
        echo "🚀 Deployment: ${{ needs.deployment.result }}"
        echo ""
        
        if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.testing.result }}" = "success" ]; then
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ needs.build-validation.result }}" = "success" ]; then
              echo "✅ PR Ready for Review - All checks passed!"
            else
              echo "❌ PR Build Validation Failed"
              exit 1
            fi
          else
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              if [ "${{ needs.deployment.result }}" = "success" ]; then
                echo "🎉 Production Deployment Successful!"
                echo "🌐 URL: ${{ secrets.RENDER_SERVICE_URL }}"
              else
                echo "❌ Production Deployment Failed"
                exit 1
              fi
            else
              echo "✅ Development Branch - Quality checks passed!"
            fi
          fi
        else
          echo "❌ Pipeline Failed - Quality or Testing issues"
          exit 1
        fi
        
        echo "============================================="
        echo "🎯 Pipeline completed at: $(date)"
        echo "============================================="
