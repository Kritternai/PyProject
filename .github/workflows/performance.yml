name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================
  # LOAD TESTING
  # ============================================
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust gunicorn
        pip install -r requirements.txt
        
    - name: Set up test environment
      run: |
        export FLASK_ENV=production
        export DATABASE_URL=sqlite:///performance_test.db
        export FLASK_SECRET_KEY=performance_test_secret_key
        
    - name: Create test database
      run: |
        python database/setup_database.py
        
    - name: Start application
      run: |
        gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 30 app:create_app &
        sleep 10
        
    - name: Create load test script
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        
        class WebsiteUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                """Called when a user starts"""
                pass
            
            @task(3)
            def view_home(self):
                """Most common: view home page"""
                self.client.get("/")
            
            @task(2)
            def view_login(self):
                """Common: view login page"""
                self.client.get("/login")
            
            @task(2)
            def view_register(self):
                """Common: view register page"""
                self.client.get("/register")
            
            @task(1)
            def view_dashboard(self):
                """Less common: view dashboard (requires auth)"""
                self.client.get("/dashboard")
            
            @task(1)
            def view_class(self):
                """Less common: view class page"""
                self.client.get("/class")
        EOF
        
    - name: Run load test
      run: |
        echo "🚀 Starting load test..."
        
        # Run locust for 2 minutes
        timeout 120s locust \
          --host=http://localhost:8000 \
          --users=50 \
          --spawn-rate=5 \
          --run-time=2m \
          --html=performance_report.html \
          --csv=performance_results \
          --headless || true
        
        echo "✅ Load test completed"
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          performance_report.html
          performance_results_*
          
    - name: Parse performance results
      run: |
        echo "📊 Performance Test Results"
        echo "=========================="
        
        if [ -f performance_results_stats.csv ]; then
          # Extract key metrics
          echo "**Key Metrics:**"
          echo ""
          
          # Request count
          TOTAL_REQUESTS=$(tail -n +2 performance_results_stats.csv | wc -l)
          echo "- Total Requests: $TOTAL_REQUESTS"
          
          # Average response time
          AVG_TIME=$(tail -n +2 performance_results_stats.csv | awk -F',' '{sum+=$3; count++} END {if(count>0) print sum/count; else print 0}')
          echo "- Average Response Time: ${AVG_TIME}ms"
          
          # 95th percentile
          P95_TIME=$(tail -n +2 performance_results_stats.csv | awk -F',' '{print $3}' | sort -n | awk '{all[NR] = $0} END{print all[int(NR*0.95)]}')
          echo "- 95th Percentile: ${P95_TIME}ms"
          
          # Failure rate
          TOTAL_FAILURES=$(tail -n +2 performance_results_stats.csv | awk -F',' '{sum+=$5} END {print sum}')
          FAILURE_RATE=$(echo "scale=2; $TOTAL_FAILURES * 100 / $TOTAL_REQUESTS" | bc -l)
          echo "- Failure Rate: ${FAILURE_RATE}%"
          
          # Performance thresholds
          echo ""
          echo "**Performance Assessment:**"
          
          if (( $(echo "$AVG_TIME < 500" | bc -l) )); then
            echo "✅ Average response time: EXCELLENT (< 500ms)"
          elif (( $(echo "$AVG_TIME < 1000" | bc -l) )); then
            echo "✅ Average response time: GOOD (< 1s)"
          elif (( $(echo "$AVG_TIME < 2000" | bc -l) )); then
            echo "⚠️  Average response time: ACCEPTABLE (< 2s)"
          else
            echo "❌ Average response time: POOR (> 2s)"
          fi
          
          if (( $(echo "$FAILURE_RATE < 1" | bc -l) )); then
            echo "✅ Failure rate: EXCELLENT (< 1%)"
          elif (( $(echo "$FAILURE_RATE < 5" | bc -l) )); then
            echo "⚠️  Failure rate: ACCEPTABLE (< 5%)"
          else
            echo "❌ Failure rate: POOR (> 5%)"
          fi
        else
          echo "⚠️  Could not parse performance results"
        fi

  # ============================================
  # STRESS TESTING
  # ============================================
  stress-test:
    name: Stress Testing
    runs-on: ubuntu-latest
    needs: load-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust gunicorn
        pip install -r requirements.txt
        
    - name: Set up test environment
      run: |
        export FLASK_ENV=production
        export DATABASE_URL=sqlite:///stress_test.db
        export FLASK_SECRET_KEY=stress_test_secret_key
        
    - name: Create test database
      run: |
        python database/setup_database.py
        
    - name: Start application
      run: |
        gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 30 app:create_app &
        sleep 10
        
    - name: Create stress test script
      run: |
        cat > stress_test.py << 'EOF'
        from locust import HttpUser, task, between
        
        class StressTestUser(HttpUser):
            wait_time = between(0.1, 0.5)
            
            @task(5)
            def stress_home(self):
                self.client.get("/")
            
            @task(3)
            def stress_login(self):
                self.client.get("/login")
            
            @task(2)
            def stress_register(self):
                self.client.get("/register")
        EOF
        
    - name: Run stress test
      run: |
        echo "🔥 Starting stress test..."
        
        # Run stress test for 1 minute with high load
        timeout 60s locust \
          --host=http://localhost:8000 \
          --users=100 \
          --spawn-rate=10 \
          --run-time=1m \
          --html=stress_report.html \
          --csv=stress_results \
          --locustfile=stress_test.py \
          --headless || true
        
        echo "✅ Stress test completed"
        
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: |
          stress_report.html
          stress_results_*

  # ============================================
  # MEMORY & CPU PROFILING
  # ============================================
  profiling:
    name: Memory & CPU Profiling
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install memory-profiler psutil gunicorn
        pip install -r requirements.txt
        
    - name: Create profiling script
      run: |
        cat > profile_app.py << 'EOF'
        import time
        import psutil
        import requests
        from memory_profiler import profile
        
        @profile
        def test_endpoints():
            base_url = "http://localhost:8000"
            endpoints = ["/", "/login", "/register", "/dashboard", "/class"]
            
            for endpoint in endpoints:
                try:
                    response = requests.get(f"{base_url}{endpoint}", timeout=5)
                    print(f"✅ {endpoint}: {response.status_code}")
                except Exception as e:
                    print(f"❌ {endpoint}: {str(e)}")
                time.sleep(0.1)
        
        def monitor_resources():
            process = psutil.Process()
            cpu_percent = process.cpu_percent()
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            
            print(f"CPU Usage: {cpu_percent}%")
            print(f"Memory Usage: {memory_mb:.2f} MB")
            
            return cpu_percent, memory_mb
        
        if __name__ == "__main__":
            print("🔍 Starting resource monitoring...")
            cpu, memory = monitor_resources()
            test_endpoints()
            cpu_after, memory_after = monitor_resources()
            
            print(f"\n📊 Resource Usage Summary:")
            print(f"CPU Change: {cpu_after - cpu:.2f}%")
            print(f"Memory Change: {memory_after - memory:.2f} MB")
        EOF
        
    - name: Set up test environment
      run: |
        export FLASK_ENV=production
        export DATABASE_URL=sqlite:///profile_test.db
        export FLASK_SECRET_KEY=profile_test_secret_key
        
    - name: Create test database
      run: |
        python database/setup_database.py
        
    - name: Start application
      run: |
        gunicorn --bind 0.0.0.0:8000 --workers 1 --timeout 30 app:create_app &
        sleep 10
        
    - name: Run profiling
      run: |
        echo "🔍 Running performance profiling..."
        python profile_app.py > profiling_results.txt 2>&1
        
        echo "✅ Profiling completed"
        
    - name: Upload profiling results
      uses: actions/upload-artifact@v3
      with:
        name: profiling-results
        path: |
          profiling_results.txt
