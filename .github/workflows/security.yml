name: Security Scanning

on:
  push:
    branches: [ main, dev/web ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================
  # CODE SECURITY ANALYSIS
  # ============================================
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        
    - name: Install project dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run Bandit security linter
      run: |
        echo "🔒 Running Bandit security analysis..."
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt -o bandit-report.txt || true
        
        # Check for high severity issues
        HIGH_SEVERITY=$(cat bandit-report.json | jq '.results[] | select(.issue_severity == "HIGH") | .issue_text' | wc -l)
        MEDIUM_SEVERITY=$(cat bandit-report.json | jq '.results[] | select(.issue_severity == "MEDIUM") | .issue_text' | wc -l)
        
        echo "Security Issues Found:"
        echo "- High Severity: $HIGH_SEVERITY"
        echo "- Medium Severity: $MEDIUM_SEVERITY"
        
        if [ "$HIGH_SEVERITY" -gt 0 ]; then
          echo "❌ High severity security issues found!"
          exit 1
        fi
        
    - name: Run Semgrep security scanner
      run: |
        echo "🔍 Running Semgrep security scan..."
        semgrep --config=auto --json --output=semgrep-report.json app/ || true
        semgrep --config=auto --text --output=semgrep-report.txt app/ || true
        
    - name: Check for secrets
      run: |
        echo "🔐 Checking for potential secrets..."
        
        # Check for common secret patterns
        SECRETS_FOUND=0
        
        # Check for hardcoded passwords
        if grep -r "password\s*=\s*['\"][^'\"]*['\"]" app/ --include="*.py" | grep -v "password_hash" | grep -v "password_field"; then
          echo "⚠️  Potential hardcoded passwords found"
          SECRETS_FOUND=1
        fi
        
        # Check for API keys
        if grep -r "api[_-]?key\s*=\s*['\"][^'\"]*['\"]" app/ --include="*.py"; then
          echo "⚠️  Potential hardcoded API keys found"
          SECRETS_FOUND=1
        fi
        
        # Check for tokens
        if grep -r "token\s*=\s*['\"][^'\"]*['\"]" app/ --include="*.py"; then
          echo "⚠️  Potential hardcoded tokens found"
          SECRETS_FOUND=1
        fi
        
        if [ "$SECRETS_FOUND" -eq 0 ]; then
          echo "✅ No obvious secrets found in code"
        fi
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          semgrep-report.json
          semgrep-report.txt

  # ============================================
  # DEPENDENCY VULNERABILITY SCAN
  # ============================================
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r requirements.txt
        
    - name: Run Safety check
      run: |
        echo "🛡️  Running Safety vulnerability check..."
        safety check --json --output safety-report.json || true
        safety check --short-report --output safety-report.txt || true
        
        # Count vulnerabilities
        VULN_COUNT=$(cat safety-report.json | jq '.vulnerabilities | length' || echo "0")
        echo "Vulnerabilities found: $VULN_COUNT"
        
        if [ "$VULN_COUNT" -gt 0 ]; then
          echo "⚠️  $VULN_COUNT vulnerabilities found in dependencies"
          
          # Show high severity vulnerabilities
          HIGH_VULN=$(cat safety-report.json | jq '.vulnerabilities[] | select(.severity == "HIGH") | .package' | wc -l)
          if [ "$HIGH_VULN" -gt 0 ]; then
            echo "❌ $HIGH_VULN HIGH severity vulnerabilities found!"
            exit 1
          fi
        else
          echo "✅ No vulnerabilities found"
        fi
        
    - name: Run pip-audit
      run: |
        echo "🔍 Running pip-audit..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=text --output=pip-audit-report.txt || true
        
    - name: Upload dependency security reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          safety-report.txt
          pip-audit-report.json
          pip-audit-report.txt

  # ============================================
  # CONTAINER SECURITY (if using Docker)
  # ============================================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false  # Enable when Dockerfile is added
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t smart-learning-hub:test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'smart-learning-hub:test'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-container-results.sarif'

  # ============================================
  # SECURITY SUMMARY
  # ============================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security]
    if: always()
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: ./security-reports
        
    - name: Download dependency reports
      uses: actions/download-artifact@v3
      with:
        name: dependency-security-reports
        path: ./dependency-reports
        
    - name: Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Date:** $(date)" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Code security summary
        if [ -f "./security-reports/bandit-report.json" ]; then
          HIGH_COUNT=$(cat ./security-reports/bandit-report.json | jq '.results[] | select(.issue_severity == "HIGH")' | jq -s length)
          MEDIUM_COUNT=$(cat ./security-reports/bandit-report.json | jq '.results[] | select(.issue_severity == "MEDIUM")' | jq -s length)
          LOW_COUNT=$(cat ./security-reports/bandit-report.json | jq '.results[] | select(.issue_severity == "LOW")' | jq -s length)
          
          echo "## Code Security (Bandit)" >> security-summary.md
          echo "" >> security-summary.md
          echo "- 🔴 High Severity: $HIGH_COUNT" >> security-summary.md
          echo "- 🟡 Medium Severity: $MEDIUM_COUNT" >> security-summary.md
          echo "- 🟢 Low Severity: $LOW_COUNT" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        # Dependency security summary
        if [ -f "./dependency-reports/safety-report.json" ]; then
          VULN_COUNT=$(cat ./dependency-reports/safety-report.json | jq '.vulnerabilities | length')
          
          echo "## Dependency Security (Safety)" >> security-summary.md
          echo "" >> security-summary.md
          echo "- 📦 Vulnerabilities Found: $VULN_COUNT" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        # Overall assessment
        echo "## Overall Security Assessment" >> security-summary.md
        echo "" >> security-summary.md
        
        if [ "$HIGH_COUNT" -eq 0 ] && [ "$VULN_COUNT" -eq 0 ]; then
          echo "✅ **SECURE** - No high severity issues found" >> security-summary.md
        elif [ "$HIGH_COUNT" -gt 0 ]; then
          echo "❌ **VULNERABLE** - High severity issues found" >> security-summary.md
        else
          echo "⚠️  **ATTENTION NEEDED** - Some issues found" >> security-summary.md
        fi
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
