name: Dependency Update Check

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  # ============================================
  # CHECK FOR UPDATES
  # ============================================
  check-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety
        
    - name: Check for outdated packages
      run: |
        echo "🔍 Checking for outdated packages..."
        pip list --outdated --format=json > outdated.json
        
        if [ -s outdated.json ]; then
          echo "📦 Found outdated packages:"
          cat outdated.json | jq -r '.[] | "  - \(.name): \(.version) → \(.latest_version)"'
          
          # Create summary
          echo "## 📦 Dependency Update Report" > update-summary.md
          echo "" >> update-summary.md
          echo "**Date:** $(date)" >> update-summary.md
          echo "**Outdated packages found:** $(cat outdated.json | jq length)" >> update-summary.md
          echo "" >> update-summary.md
          echo "### Packages to Update:" >> update-summary.md
          echo "" >> update-summary.md
          
          cat outdated.json | jq -r '.[] | "- **\(.name)**: `\(.version)` → `\(.latest_version)`"' >> update-summary.md
        else
          echo "✅ All packages are up to date!"
          echo "## ✅ All Dependencies Up to Date" > update-summary.md
          echo "" >> update-summary.md
          echo "**Date:** $(date)" >> update-summary.md
          echo "All packages in requirements.txt are up to date!" >> update-summary.md
        fi
        
    - name: Security vulnerability check
      run: |
        echo "🔒 Checking for security vulnerabilities..."
        safety check --json --output safety-report.json || true
        
        if [ -f safety-report.json ] && [ -s safety-report.json ]; then
          VULN_COUNT=$(cat safety-report.json | jq length)
          echo "⚠️  Found $VULN_COUNT security vulnerabilities"
          
          echo "" >> update-summary.md
          echo "### ⚠️ Security Vulnerabilities Found" >> update-summary.md
          echo "" >> update-summary.md
          
          cat safety-report.json | jq -r '.[] | "- **\(.package)**: \(.advisory)"' >> update-summary.md
        else
          echo "✅ No security vulnerabilities found"
        fi
        
    - name: Upload reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          outdated.json
          safety-report.json
          update-summary.md
          
    - name: Create Issue (if updates needed)
      if: hashFiles('outdated.json') != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('update-summary.md', 'utf8');
          
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['dependencies', 'automated']
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('Dependency Update') && 
            issue.title.includes(new Date().getFullYear().toString())
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Dependency Update Report - ${new Date().toISOString().split('T')[0]}`,
              body: summary + '\n\n---\n\n*This issue was automatically created by the dependency update workflow.*',
              labels: ['dependencies', 'automated', 'maintenance']
            });
          } else {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: summary + '\n\n---\n\n*This issue was automatically updated by the dependency update workflow.*'
            });
          }

  # ============================================
  # AUTO-UPDATE MINOR VERSIONS
  # ============================================
  auto-update:
    name: Auto-update Minor Versions
    runs-on: ubuntu-latest
    needs: check-updates
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Update requirements.txt
      run: |
        echo "🔄 Updating minor versions..."
        
        # Create a backup
        cp requirements.txt requirements.txt.backup
        
        # Update packages
        pip install --upgrade -r requirements.txt
        
        # Generate new requirements.txt
        pip freeze > requirements_new.txt
        
        # Compare and create pull request if changes
        if ! diff requirements.txt requirements_new.txt > /dev/null; then
          echo "📝 Changes detected, creating pull request..."
          
          # Update requirements.txt
          mv requirements_new.txt requirements.txt
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create branch and commit
          git checkout -b "deps/update-$(date +%Y%m%d-%H%M%S)"
          git add requirements.txt
          git commit -m "chore: Update dependencies to latest minor versions"
          
          # Push and create PR
          git push origin HEAD
          
          # Create pull request
          gh pr create \
            --title "📦 Auto-update dependencies" \
            --body "Automatically updated dependencies to latest minor versions.\n\n**Changes:**\n$(diff requirements.txt.backup requirements.txt || echo 'See file changes for details')\n\n---\n*This PR was automatically created by the dependency update workflow.*" \
            --label "dependencies,automated" \
            --assignee "${{ github.actor }}"
        else
          echo "✅ No updates needed"
          rm requirements_new.txt
        fi
