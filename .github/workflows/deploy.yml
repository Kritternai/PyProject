name: Deploy to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================
  # PRE-DEPLOYMENT CHECKS
  # ============================================
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate deployment files
      run: |
        echo "üîç Checking deployment files..."
        
        # Check required files exist
        if [ ! -f "Procfile" ]; then
          echo "‚ùå Procfile not found"
          exit 1
        fi
        
        if [ ! -f "render.yaml" ]; then
          echo "‚ùå render.yaml not found"
          exit 1
        fi
        
        if [ ! -f "requirements.txt" ]; then
          echo "‚ùå requirements.txt not found"
          exit 1
        fi
        
        if [ ! -f "start.py" ]; then
          echo "‚ùå start.py not found"
          exit 1
        fi
        
        if [ ! -f "build.sh" ]; then
          echo "‚ùå build.sh not found"
          exit 1
        fi
        
        # Check file permissions
        chmod +x build.sh
        
        echo "‚úÖ All deployment files validated"
        
    - name: Test build process
      run: |
        echo "üî® Testing build process..."
        export FLASK_ENV=production
        export DATABASE_URL=sqlite:///site.db
        export FLASK_SECRET_KEY=build_test_secret_key
        
        # Test database setup
        python database/setup_database.py
        
        # Test application import
        python -c "from app import create_app; app = create_app('production'); print('‚úÖ App created successfully')"
        
        echo "‚úÖ Build process validated"
        
    - name: Security check
      run: |
        echo "üîí Running security checks..."
        
        # Check for secrets in code
        if grep -r "password\|secret\|key\|token" app/ --include="*.py" | grep -v "#" | grep -v "__pycache__"; then
          echo "‚ö†Ô∏è  Potential secrets found in code"
        fi
        
        # Check for hardcoded URLs
        if grep -r "http://localhost\|127.0.0.1" app/ --include="*.py"; then
          echo "‚ö†Ô∏è  Hardcoded localhost URLs found"
        fi
        
        echo "‚úÖ Security checks completed"

  # ============================================
  # DEPLOY TO RENDER
  # ============================================
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
        
    - name: Health check
      run: |
        echo "üè• Running health check..."
        
        # Get deployment URL (you'll need to set this in secrets)
        DEPLOYMENT_URL="${{ secrets.RENDER_SERVICE_URL }}"
        
        if [ -z "$DEPLOYMENT_URL" ]; then
          echo "‚ö†Ô∏è  RENDER_SERVICE_URL not set in secrets"
          echo "‚úÖ Deployment completed (health check skipped)"
        else
          # Wait for service to be ready
          for i in {1..10}; do
            if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
              echo "‚úÖ Health check passed - service is responding"
              break
            else
              echo "‚è≥ Attempt $i/10: Service not ready yet..."
              sleep 30
            fi
          done
        fi
        
    - name: Deployment summary
      run: |
        echo "üéâ Deployment Summary"
        echo "=================="
        echo "‚úÖ Deployment completed successfully"
        echo "üåê Service URL: ${{ secrets.RENDER_SERVICE_URL }}"
        echo "üìÖ Deployed at: $(date)"
        echo "üîó Commit: ${{ github.sha }}"
        echo "üë§ Deployed by: ${{ github.actor }}"

  # ============================================
  # POST-DEPLOYMENT TESTS
  # ============================================
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Run smoke tests
      run: |
        echo "üß™ Running post-deployment smoke tests..."
        
        DEPLOYMENT_URL="${{ secrets.RENDER_SERVICE_URL }}"
        
        if [ -z "$DEPLOYMENT_URL" ]; then
          echo "‚ö†Ô∏è  RENDER_SERVICE_URL not set - skipping smoke tests"
          exit 0
        fi
        
        # Test basic endpoints
        echo "Testing home page..."
        curl -f -s "$DEPLOYMENT_URL" > /dev/null || exit 1
        
        echo "Testing login page..."
        curl -f -s "$DEPLOYMENT_URL/login" > /dev/null || exit 1
        
        echo "Testing register page..."
        curl -f -s "$DEPLOYMENT_URL/register" > /dev/null || exit 1
        
        echo "‚úÖ All smoke tests passed"
        
    - name: Performance check
      run: |
        echo "‚ö° Running performance check..."
        
        DEPLOYMENT_URL="${{ secrets.RENDER_SERVICE_URL }}"
        
        if [ -z "$DEPLOYMENT_URL" ]; then
          echo "‚ö†Ô∏è  RENDER_SERVICE_URL not set - skipping performance check"
          exit 0
        fi
        
        # Check response time
        RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$DEPLOYMENT_URL")
        
        if (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
          echo "‚úÖ Response time: ${RESPONSE_TIME}s (Good)"
        else
          echo "‚ö†Ô∏è  Response time: ${RESPONSE_TIME}s (Slow)"
        fi

  # ============================================
  # NOTIFICATIONS
  # ============================================
  notify:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-tests]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "üéâ Deployment Successful!"
        echo "========================"
        echo "‚úÖ Application deployed to Render"
        echo "üåê URL: ${{ secrets.RENDER_SERVICE_URL }}"
        echo "üìÖ Time: $(date)"
        echo "üîó Commit: ${{ github.sha }}"
        
    - name: Notify Failure
      if: ${{ needs.deploy.result == 'failure' }}
      run: |
        echo "‚ùå Deployment Failed!"
        echo "===================="
        echo "üîç Please check the logs for details"
        echo "üìÖ Time: $(date)"
        echo "üîó Commit: ${{ github.sha }}"
        exit 1
